#!/usr/bin/env sos-runner
#fileformat=SOS1.0

[docker_to_singularity, default_1]
import glob
depends: executable('spython')
input: glob.glob("container/docker/*.dockerfile"), group_by = 1
output: f"container/singularity/{_input:bn}.def"
bash: expand = True
  spython recipe {_input} | sed 's/Stage: spython-base//g' &> {_output}

[singularity]
parameter: config = path
parameter: out_dir = path('container/singularity')
bash: expand = True, stderr = f'{config}.stderr', stdout = f'{config}.stdout'
  rm -f {out_dir}/{config:bn}.sif
  singularity build --fakeroot {out_dir}/{config:bn}.sif {config}
  md5sum {out_dir}/{config:bn}.sif > {out_dir}/{config:bn}.md5

[docker]
import glob
depends: executable('docker')
input: glob.glob("container/docker/*.dockerfile"), group_by = 1, concurrent = False
repo = str(_input).split("/")[-1].lower()[:-11]
bash: expand = True
	set -e
	docker build -t gaow/{repo} -f {_input} .
	docker push gaow/{repo}


[build, default_2]
input: group_by = 'all'
bash:
	jupyter-book build .  --path-output . --config website/_config.yml --toc website/_toc.yml 
	rsync -auzP code/images/* _build/html/_images/
	ghp-import -n -p -f _build/html
	rm -rf pipeline/*

[make_link, default_3]
from glob import glob
input: [x for x in glob('code/**/*.ipynb', recursive=True) if not '.ipynb_checkpoints' in x], group_by = 1
output: f'pipeline/{_input:b}'
bash: expand = True
	cd pipeline
	ln -s ../{_input} {_output:b}
